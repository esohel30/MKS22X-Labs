      final static int SPRING = 4;
      float SPRING_LENGTH = 50;
      final static float SPRING_DAMPEN = 0.990;
      final static float SPRING_CONSTANT = 0.015;
      final static int MODE = SPRING;
      float gravity = 0.25; 
      
      
      OrbList orbs;
      void setup() {
        size(1000, 800);
        orbs = new OrbList();
      }
      void mouseClicked() {
        orbs.add(new OrbNode(mouseX,mouseY,0,0,30));
      }
      void draw() {
        background(255);
        orbs.processAll();
        orbs.display();
      }
      
      void keyPressed() {
        if(keyCode == '8'){ 
          if(gravity > 0){ 
          gravity -= 0.01; 
          }
        } 
        if(keyCode == '7'){ 
          gravity += 0.01; 
        } 
        if(keyCode == '6'){ 
            if(SPRING_LENGTH > 0){ 
            SPRING_LENGTH -= 0.01; 
            }
        }
        if(keyCode == '5'){ 
          SPRING_LENGTH += 0.01; 
        } 
      }
      
      
   
      public class OrbNode {
        float x, y;
        float dx, dy;
        float radius;
        color c;
        OrbNode next, prev;
        
        public OrbNode() {  }
        public OrbNode(float x_, float y_) {
          this(x_, y_, 0.0, 0.0, 50.0);
        }
        
        public OrbNode(float x_, float y_, float dx_, float dy_, float radius_ ) {
          x = x_;
          y = y_;
          dx = dx_;
          dy = dy_;
          radius = radius_;
          c = color(random(255), random(255), random(255), 200);
        }

        void display() {
          fill(c);
          ellipse(x, y, radius*2, radius*2);
          if(next != null){ 
            line(x, y, next.x, next.y);
          } 
          if(prev != null){ 
            line(x, y, prev.x, prev.y);
          } 
        }


        void move() {

          prev.springAttract(this); 
          next.springAttract(this); 
          x+=dx;
          y+=dy;
          dy+= gravity ;
          
        }

        void springAttract(OrbNode other) {
          float dist = dist(x, y, other.x, other.y) ;
          float force = (dist - SPRING_LENGTH) * SPRING_CONSTANT;
          float displacex = (x - other.x) ;
          float displacey = (y - other.y) ;
          other.dx += displacex * force / dist;
          other.dy += displacey * force / dist;
          other.dx*= SPRING_DAMPEN;
          other.dy*= SPRING_DAMPEN;
        }
      }
     
      public class FixedOrbNode extends OrbNode{
        void move() {
        }
        FixedOrbNode(float x_, float y_) {
          x = x_;
          y = y_;
          radius = 30;
          c = color(0);
        }
      }
      
      public class OrbList {
        OrbNode first, last;

        OrbList() {
          first = new FixedOrbNode(0, height/5);
          last = new FixedOrbNode(width, height/5);
          first.next = last;
          last.prev = first;
        }

        void add(OrbNode orb){
          orb.prev = last.prev; 
          orb.prev.next = orb; 
          orb.next = last; 
          last.prev = orb; 
        }

        void processAll() {
          OrbNode current = first;
          while(current != null){ 
            current.move();
            current = current.next; 
          } 
        }
    
        void display() {
          OrbNode current = first;
          while(current != null){ 
            current.display(); 
            current = current.next; 
        }
      }
      } 
